from caterpillar.abc import _ContextLambda, _StructLike, _ContainsStruct
from typing import Any, Optional, Union

MODE_PACK: int = ...
MODE_UNPACK: int = ...
ATTR_STRUCT: str = ...
ATTR_TYPE: str = ...
ATTR_ACTION_PACK: str = ...
ATTR_ACTION_UNPACK: str = ...

class Action:
    __action_pack__: _ContextLambda
    __action_unpack__: _ContextLambda
    def __init__(
        self,
        pack: _ContextLambda | None = None,
        unpack: _ContextLambda | None = None,
        both: _ContextLambda | None = None,
    ) -> None: ...
    @staticmethod
    def is_action(obj: Any) -> bool: ...

def hasstruct(obj: Any) -> bool: ...
def getstruct(
    obj: Any, /, __default: Optional[_StructLike] = None
) -> Optional[_StructLike]: ...
def typeof(struct: Union[_StructLike, _ContainsStruct]) -> type: ...
