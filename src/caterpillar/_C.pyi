from typing import Any
from caterpillar.abc import (
    _OT,
    _ArchLike,
    _EndianLike,
    _SupportsSetEndian,
)

BIG_ENDIAN: c_Endian
HOST_ARCH: c_Arch
LITTLE_ENDIAN: c_Endian
NATIVE_ENDIAN: c_Endian

class c_Arch(_ArchLike):
    name: str
    ptr_size: int
    def __init__(self, name: str, ptr_size: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class c_Endian(_EndianLike):
    ch: str
    name: str
    def __init__(self, name: str, ch: int) -> None: ...
    def __add__(self, other: _SupportsSetEndian[_OT]) -> _OT: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other: _SupportsSetEndian[_OT]) -> _OT: ...

class c_Option:
    name: str
    value: Any
    def __init__(self, name: str, value: Any = ...) -> None: ...
    def __eq__(self, value: object | c_Option, /) -> bool: ...
    def __hash__(self) -> int: ...

__all__ = [
    "c_Arch",
    "c_Endian",
    "c_Option",
    "BIG_ENDIAN",
    "HOST_ARCH",
    "LITTLE_ENDIAN",
    "NATIVE_ENDIAN",
]
